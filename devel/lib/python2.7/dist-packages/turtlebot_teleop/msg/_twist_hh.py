# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from turtlebot_teleop/twist_hh.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class twist_hh(genpy.Message):
  _md5sum = "2ef51c1b7227604fe91ab71f953c0661"
  _type = "turtlebot_teleop/twist_hh"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This expresses velocity in free space broken into its linear and angular parts.



float32 linear_module
float32 putter_1
float32 putter_2

int8 oblique_angle
int8 oblique_drawer
int8 flat_drawer

uint8 belt
int8 camera_angle
int8 camera_tilt

int8 arm_auto"""
  __slots__ = ['linear_module','putter_1','putter_2','oblique_angle','oblique_drawer','flat_drawer','belt','camera_angle','camera_tilt','arm_auto']
  _slot_types = ['float32','float32','float32','int8','int8','int8','uint8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       linear_module,putter_1,putter_2,oblique_angle,oblique_drawer,flat_drawer,belt,camera_angle,camera_tilt,arm_auto

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(twist_hh, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.linear_module is None:
        self.linear_module = 0.
      if self.putter_1 is None:
        self.putter_1 = 0.
      if self.putter_2 is None:
        self.putter_2 = 0.
      if self.oblique_angle is None:
        self.oblique_angle = 0
      if self.oblique_drawer is None:
        self.oblique_drawer = 0
      if self.flat_drawer is None:
        self.flat_drawer = 0
      if self.belt is None:
        self.belt = 0
      if self.camera_angle is None:
        self.camera_angle = 0
      if self.camera_tilt is None:
        self.camera_tilt = 0
      if self.arm_auto is None:
        self.arm_auto = 0
    else:
      self.linear_module = 0.
      self.putter_1 = 0.
      self.putter_2 = 0.
      self.oblique_angle = 0
      self.oblique_drawer = 0
      self.flat_drawer = 0
      self.belt = 0
      self.camera_angle = 0
      self.camera_tilt = 0
      self.arm_auto = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f3bB3b().pack(_x.linear_module, _x.putter_1, _x.putter_2, _x.oblique_angle, _x.oblique_drawer, _x.flat_drawer, _x.belt, _x.camera_angle, _x.camera_tilt, _x.arm_auto))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.linear_module, _x.putter_1, _x.putter_2, _x.oblique_angle, _x.oblique_drawer, _x.flat_drawer, _x.belt, _x.camera_angle, _x.camera_tilt, _x.arm_auto,) = _get_struct_3f3bB3b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f3bB3b().pack(_x.linear_module, _x.putter_1, _x.putter_2, _x.oblique_angle, _x.oblique_drawer, _x.flat_drawer, _x.belt, _x.camera_angle, _x.camera_tilt, _x.arm_auto))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.linear_module, _x.putter_1, _x.putter_2, _x.oblique_angle, _x.oblique_drawer, _x.flat_drawer, _x.belt, _x.camera_angle, _x.camera_tilt, _x.arm_auto,) = _get_struct_3f3bB3b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f3bB3b = None
def _get_struct_3f3bB3b():
    global _struct_3f3bB3b
    if _struct_3f3bB3b is None:
        _struct_3f3bB3b = struct.Struct("<3f3bB3b")
    return _struct_3f3bB3b
