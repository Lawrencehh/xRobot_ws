// Generated by gencpp from file turtlebot_teleop/twist_hh.msg
// DO NOT EDIT!


#ifndef TURTLEBOT_TELEOP_MESSAGE_TWIST_HH_H
#define TURTLEBOT_TELEOP_MESSAGE_TWIST_HH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlebot_teleop
{
template <class ContainerAllocator>
struct twist_hh_
{
  typedef twist_hh_<ContainerAllocator> Type;

  twist_hh_()
    : linear_module(0.0)
    , putter_1(0.0)
    , putter_2(0.0)
    , oblique_angle(0)
    , oblique_drawer(0)
    , flat_drawer(0)
    , belt(0)
    , camera_angle(0)
    , camera_tilt(0)  {
    }
  twist_hh_(const ContainerAllocator& _alloc)
    : linear_module(0.0)
    , putter_1(0.0)
    , putter_2(0.0)
    , oblique_angle(0)
    , oblique_drawer(0)
    , flat_drawer(0)
    , belt(0)
    , camera_angle(0)
    , camera_tilt(0)  {
  (void)_alloc;
    }



   typedef float _linear_module_type;
  _linear_module_type linear_module;

   typedef float _putter_1_type;
  _putter_1_type putter_1;

   typedef float _putter_2_type;
  _putter_2_type putter_2;

   typedef int8_t _oblique_angle_type;
  _oblique_angle_type oblique_angle;

   typedef int8_t _oblique_drawer_type;
  _oblique_drawer_type oblique_drawer;

   typedef int8_t _flat_drawer_type;
  _flat_drawer_type flat_drawer;

   typedef uint8_t _belt_type;
  _belt_type belt;

   typedef int8_t _camera_angle_type;
  _camera_angle_type camera_angle;

   typedef int8_t _camera_tilt_type;
  _camera_tilt_type camera_tilt;





  typedef boost::shared_ptr< ::turtlebot_teleop::twist_hh_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot_teleop::twist_hh_<ContainerAllocator> const> ConstPtr;

}; // struct twist_hh_

typedef ::turtlebot_teleop::twist_hh_<std::allocator<void> > twist_hh;

typedef boost::shared_ptr< ::turtlebot_teleop::twist_hh > twist_hhPtr;
typedef boost::shared_ptr< ::turtlebot_teleop::twist_hh const> twist_hhConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot_teleop::twist_hh_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot_teleop::twist_hh_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace turtlebot_teleop

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'turtlebot_teleop': ['/home/andy/xRobot_ws/src/turtlebot/turtlebot_teleop/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_teleop::twist_hh_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_teleop::twist_hh_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_teleop::twist_hh_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_teleop::twist_hh_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_teleop::twist_hh_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_teleop::twist_hh_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_teleop::twist_hh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18a62653abd37f23cf97caba6719e246";
  }

  static const char* value(const ::turtlebot_teleop::twist_hh_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18a62653abd37f23ULL;
  static const uint64_t static_value2 = 0xcf97caba6719e246ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot_teleop::twist_hh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot_teleop/twist_hh";
  }

  static const char* value(const ::turtlebot_teleop::twist_hh_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot_teleop::twist_hh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This expresses velocity in free space broken into its linear and angular parts.\n\
\n\
\n\
\n\
float32 linear_module\n\
float32 putter_1\n\
float32 putter_2\n\
\n\
int8 oblique_angle\n\
int8 oblique_drawer\n\
int8 flat_drawer\n\
\n\
uint8 belt\n\
int8 camera_angle\n\
int8 camera_tilt\n\
";
  }

  static const char* value(const ::turtlebot_teleop::twist_hh_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot_teleop::twist_hh_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_module);
      stream.next(m.putter_1);
      stream.next(m.putter_2);
      stream.next(m.oblique_angle);
      stream.next(m.oblique_drawer);
      stream.next(m.flat_drawer);
      stream.next(m.belt);
      stream.next(m.camera_angle);
      stream.next(m.camera_tilt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct twist_hh_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot_teleop::twist_hh_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot_teleop::twist_hh_<ContainerAllocator>& v)
  {
    s << indent << "linear_module: ";
    Printer<float>::stream(s, indent + "  ", v.linear_module);
    s << indent << "putter_1: ";
    Printer<float>::stream(s, indent + "  ", v.putter_1);
    s << indent << "putter_2: ";
    Printer<float>::stream(s, indent + "  ", v.putter_2);
    s << indent << "oblique_angle: ";
    Printer<int8_t>::stream(s, indent + "  ", v.oblique_angle);
    s << indent << "oblique_drawer: ";
    Printer<int8_t>::stream(s, indent + "  ", v.oblique_drawer);
    s << indent << "flat_drawer: ";
    Printer<int8_t>::stream(s, indent + "  ", v.flat_drawer);
    s << indent << "belt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.belt);
    s << indent << "camera_angle: ";
    Printer<int8_t>::stream(s, indent + "  ", v.camera_angle);
    s << indent << "camera_tilt: ";
    Printer<int8_t>::stream(s, indent + "  ", v.camera_tilt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT_TELEOP_MESSAGE_TWIST_HH_H
